{"version":3,"sources":["components/Header.tsx","components/aboutMe/IconComponents.tsx","components/aboutMe/TerminalView.tsx","components/aboutMe/AboutMe.tsx","components/projects/Projects.tsx","components/work/WorkExperience.tsx","components/ContentContainer.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["HeaderComponent","currentMenuInView","className","theme","mode","defaultSelectedKeys","selectedKeys","href","target","rel","Item","Icons","FaJava","FaPython","FaHtml5","FaCss3Alt","FaNode","FaReact","FaAngular","FaGithubAlt","FaAws","FaDocker","SiSpring","SiDjango","SiMysql","SiPostgresql","SiElasticsearch","SiTypescript","SiJavascript","DiRuby","DiMongodb","DiRedis","IoLogoJavascript","GrOracle","TerminalView","id","AboutMe","useState","programming","web","tools","databases","skills","setSkills","useEffect","axios","get","then","resp","catch","console","log","renderSkills","skill","skill_list","res","forEach","skill_item","push","color","icon","size","src","alt","preview","Meta","Card","Projects","projects","setProjects","err","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","project","cover","headerImg","title","description","accomplishments","respItem","FireTwoTone","WorkExperience","work","setWork","itemLayout","item","extra","links","length","span","offset","LinkOutlined","linksTitle","bordered","linkItem","avatar","logo","link","shape","position","startDate","endDate","companyName","EnvironmentOutlined","location","responsibilities","useOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","threshold","observe","current","disconnect","ContentContainer","setMenuInView","aboutRef","useRef","workRef","projectRef","aboutVisible","setMenuCallback","workVisible","projectVisible","setCurrentMenu","App","Header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9fb88d2.chunk.js","sourcesContent":["import { Menu } from \"antd\"\nimport { FaLinkedin, FaGithub } from \"react-icons/fa\"\nimport { IoPersonCircleOutline, IoCodeWorkingOutline } from \"react-icons/io5\"\nimport { GrProjects } from \"react-icons/gr\"\n\nconst HeaderComponent = ({ currentMenuInView }: any) => {\n    return (\n        <div className=\"header\">\n            <Menu\n                theme=\"light\"\n                mode=\"horizontal\"\n                defaultSelectedKeys={[\"about\"]}\n                selectedKeys={[currentMenuInView]}\n            >\n                {currentMenuInView != \"about\" && (\n                    <a\n                        href=\"https://www.linkedin.com/in/hemanthnhs/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className=\"header-name\"\n                    >\n                        #Hemanth\n                    </a>\n                )}\n                <Menu.Item>\n                    <a\n                        href=\"https://www.linkedin.com/in/hemanthnhs/\"\n                        target=\"_blank\"\n                        className=\"linkedin-btn\"\n                        rel=\"noreferrer\"\n                    >\n                        <FaLinkedin />\n                    </a>\n                </Menu.Item>\n                <Menu.Item>\n                    <a\n                        href=\"https://github.com/hemanthnhs\"\n                        target=\"_blank\"\n                        className=\"github-btn\"\n                        rel=\"noreferrer\"\n                    >\n                        <FaGithub />\n                    </a>\n                </Menu.Item>\n                <Menu.Item className=\"pull-right\" key=\"project\">\n                    <a href=\"#projects\">\n                        <GrProjects className=\"logo-btn\" />\n                        Projects\n                    </a>\n                </Menu.Item>\n                <Menu.Item className=\"pull-right\" key=\"work\">\n                    <a href=\"#work\">\n                        <IoCodeWorkingOutline className=\"logo-btn\" />\n                        Work Experience\n                    </a>\n                </Menu.Item>\n                <Menu.Item className=\"pull-right\" key=\"about\">\n                    <a href=\"#\">\n                        <IoPersonCircleOutline className=\"logo-btn\" />\n                        About Me\n                    </a>\n                </Menu.Item>\n            </Menu>\n        </div>\n    )\n}\n\nexport default HeaderComponent\n","import {\n    FaJava,\n    FaPython,\n    FaHtml5,\n    FaCss3Alt,\n    FaNode,\n    FaReact,\n    FaAngular,\n    FaGithubAlt,\n    FaAws,\n    FaDocker,\n} from \"react-icons/fa\"\nimport {\n    SiSpring,\n    SiDjango,\n    SiMysql,\n    SiPostgresql,\n    SiElasticsearch,\n    SiTypescript,\n    SiJavascript,\n} from \"react-icons/si\"\nimport { DiRuby, DiMongodb, DiRedis } from \"react-icons/di\"\nimport { IoLogoJavascript } from \"react-icons/io\"\nimport { GrOracle } from \"react-icons/gr\"\n\nexport let Icons: any = {\n    FaJava: <FaJava />,\n    FaPython: <FaPython />,\n    FaHtml5: <FaHtml5 />,\n    FaCss3Alt: <FaCss3Alt />,\n    FaNode: <FaNode />,\n    FaReact: <FaReact />,\n    FaAngular: <FaAngular />,\n    FaGithubAlt: <FaGithubAlt />,\n    FaAws: <FaAws />,\n    FaDocker: <FaDocker />,\n    SiSpring: <SiSpring />,\n    SiDjango: <SiDjango />,\n    SiMysql: <SiMysql />,\n    SiPostgresql: <SiPostgresql />,\n    SiElasticsearch: <SiElasticsearch />,\n    SiTypescript: <SiTypescript />,\n    SiJavascript: <SiJavascript />,\n    DiRuby: <DiRuby />,\n    DiMongodb: <DiMongodb />,\n    DiRedis: <DiRedis />,\n    IoLogoJavascript: <IoLogoJavascript />,\n    GrOracle: <GrOracle />,\n}\n","import \"./AboutMe.css\"\n\nconst TerminalView = () => {\n    return (\n        <div>\n            <div id=\"terminal-bar\">Hemanth Sai Nimmala: ~</div>\n            <div className=\"terminal\">\n                <div>\n                    <span className=\"terminal-user\">\n                        hemanth@Work:<span className=\"tilde-seperation\">~</span>\n                        <span className=\"dollar-prompt\">$</span>\n                    </span>\n                    <span className=\"terminal-text\">\n                        Ex-Software Engineer at Fidelity, OpenText, Voonik\n                    </span>\n                </div>\n                <div>\n                    <span className=\"terminal-user\">\n                        hemanth@Education:<span className=\"tilde-seperation\">~</span>\n                        <span className=\"dollar-prompt\">$</span>\n                    </span>\n                    <span className=\"terminal-text\">\n                        Master of Science in Computer Science from Northeastern\n                        University\n                    </span>\n                </div>\n                <div>\n                    <span className=\"terminal-user\">\n                        hemanth@Interest:<span className=\"tilde-seperation\">~</span>\n                        <span className=\"dollar-prompt\">$</span>\n                    </span>\n                    <span className=\"terminal-text\">\n                        I love developing Software Applications...\n                    </span>\n                    <span id=\"terminal-cursor-prompt\"></span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TerminalView\n","import \"./AboutMe.css\"\nimport { Avatar, Image } from \"antd\"\nimport { Tag } from \"antd\"\nimport { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { Icons } from \"./IconComponents\"\nimport TerminalView from \"./TerminalView\"\nconst AboutMe = () => {\n    const [skills, setSkills] = useState<any>({\n        programming: [],\n        web: [],\n        tools: [],\n        databases: [],\n    })\n    useEffect(() => {\n        axios\n            .get(\"./data/skills.json\")\n            .then((resp) => {\n                setSkills(resp[\"data\"])\n            })\n            .catch((resp) => {\n                console.log(\"Error occcured while fetching work details\", resp)\n            })\n    }, [])\n\n    const renderSkills = (skill: string) => {\n        let skill_list = skills[skill]\n        let res: any = []\n        skill_list.forEach((skill_item: [\"string\", \"string\"]) => {\n            if (skill_item[1]) {\n                res.push(\n                    <Tag\n                        className=\"skill-tag\"\n                        color=\"#55acee\"\n                        icon={Icons[skill_item[1]]}\n                    >\n                        {skill_item[0]}\n                    </Tag>\n                )\n            } else {\n                res.push(\n                    <Tag className=\"skill-tag\" color=\"#55acee\">\n                        {skill_item[0]}\n                    </Tag>\n                )\n            }\n        })\n        return <span>{res}</span>\n    }\n    return (\n        <div>\n            <div className=\"intro\">\n                <div className=\"text-center\">\n                    <Avatar\n                        size={120}\n                        icon={\n                            <Image\n                                src={\"./assets/images/profile-image.jpeg\"}\n                                alt=\"Hemanth Sai Nimmala\"\n                                preview={false}\n                            />\n                        }\n                        alt=\"Hemanth Sai Nimmala\"\n                    />\n                </div>\n                <div className=\"text-center\">\n                    Hey I&apos;m\n                    <span className=\"name\">&nbsp;#Hemanth</span>\n                </div>\n                <TerminalView />\n                <div className=\"text-center\">\n                    <span className=\"skill-label\">Languages & Frameworks</span>\n                    {renderSkills(\"programming\")}\n                </div>\n                <div className=\"text-center\">\n                    <span className=\"skill-label\">Web Technologies</span>\n                    {renderSkills(\"web\")}\n                </div>\n                <div className=\"text-center\">\n                    <span className=\"skill-label\">Databases</span>\n                    {renderSkills(\"databases\")}\n                </div>\n                <div className=\"text-center\">\n                    <span className=\"skill-label\">Tools</span>\n                    {renderSkills(\"tools\")}\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default AboutMe\n","import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport { List, Card } from \"antd\"\nimport { FireTwoTone } from \"@ant-design/icons\"\nimport \"./Projects.css\"\n\nconst { Meta } = Card\n\nconst Projects = () => {\n    const [projects, setProjects] = useState([])\n    useEffect(() => {\n        axios\n            .get(\"./data/projects.json\")\n            .then((resp) => {\n                setProjects(resp[\"data\"])\n            })\n            .catch((err) => {\n                console.log(\"Error occured while getting projects data\", err)\n            })\n    }, [])\n    return (\n        <List\n            grid={{\n                gutter: 16,\n                xs: 1,\n                sm: 2,\n                md: 3,\n                lg: 3,\n                xl: 4,\n                xxl: 4,\n            }}\n            dataSource={projects}\n            renderItem={(project: any) => (\n                <List.Item>\n                    <Card\n                        cover={\n                            <img\n                                alt=\"example\"\n                                className=\"project-img\"\n                                src={project.headerImg}\n                            />\n                        }\n                    >\n                        <Meta\n                            title={project.title}\n                            description={\n                                <List\n                                    className=\"project-accomplishment-list\"\n                                    size=\"small\"\n                                    dataSource={project.accomplishments}\n                                    renderItem={(respItem: any) => (\n                                        <List.Item className=\"project-accomplishment\">\n                                            <span>\n                                                <FireTwoTone />\n                                            </span>\n                                            {respItem}\n                                        </List.Item>\n                                    )}\n                                />\n                            }\n                        />\n                    </Card>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default Projects\n","import \"./WorkExperience.css\"\nimport { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { List, Avatar, Col, Card } from \"antd\"\nimport { EnvironmentOutlined, FireTwoTone, LinkOutlined } from \"@ant-design/icons\"\n\nconst WorkExperience = () => {\n    const [work, setWork] = useState([])\n    useEffect(() => {\n        axios\n            .get(\"./data/work.json\")\n            .then((resp) => {\n                setWork(resp[\"data\"])\n            })\n            .catch((resp) => {\n                console.log(\"Error occcured while fetching work details\", resp)\n            })\n    }, [])\n    return (\n        <div>\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={work}\n                renderItem={(item: any) => (\n                    <List.Item\n                        extra={\n                            item.links.length != 0 && (\n                                <Col span={4} offset={1}>\n                                    <Card\n                                        className=\"link-card\"\n                                        title={\n                                            <>\n                                                <LinkOutlined />\n                                                {item.linksTitle}\n                                            </>\n                                        }\n                                        bordered={false}\n                                    >\n                                        {\n                                            <List\n                                                itemLayout=\"horizontal\"\n                                                dataSource={item.links}\n                                                renderItem={(linkItem: any) => (\n                                                    <List.Item className=\"links-list-item\">\n                                                        <List.Item.Meta\n                                                            className=\"links-list-item-meta\"\n                                                            avatar={\n                                                                <Avatar\n                                                                    src={\n                                                                        linkItem.logo\n                                                                    }\n                                                                />\n                                                            }\n                                                            title={\n                                                                <a\n                                                                    href={\n                                                                        linkItem.link\n                                                                    }\n                                                                    className=\"links-list-item-title\"\n                                                                >\n                                                                    {linkItem.title}\n                                                                </a>\n                                                            }\n                                                        />\n                                                    </List.Item>\n                                                )}\n                                            />\n                                        }\n                                    </Card>\n                                </Col>\n                            )\n                        }\n                    >\n                        <List.Item.Meta\n                            avatar={\n                                <Avatar\n                                    src={\"/assets/images/\" + item.logo}\n                                    size={100}\n                                    shape=\"square\"\n                                />\n                            }\n                            title={\n                                <>\n                                    <div>\n                                        <span className=\"work-position\">\n                                            {item.position}\n                                        </span>\n                                        <span className=\"work-dates\">\n                                            {item.startDate + \" - \"}\n                                            {item.endDate ? item.endDate : \"Present\"}\n                                        </span>\n                                    </div>\n                                    <div>\n                                        <span className=\"work-company\">\n                                            {item.companyName}\n                                        </span>\n                                        <span className=\"work-location\">\n                                            <span className=\"work-loc-icon\">\n                                                <EnvironmentOutlined />\n                                            </span>\n                                            {item.location}\n                                        </span>\n                                    </div>\n                                </>\n                            }\n                            description={\n                                <List\n                                    className=\"work-responsibility-list\"\n                                    size=\"small\"\n                                    dataSource={item.responsibilities}\n                                    renderItem={(respItem: any) => (\n                                        <List.Item className=\"work-responsibility\">\n                                            <span className=\"work-responsibility-icon\">\n                                                <FireTwoTone />\n                                            </span>\n                                            {respItem}\n                                        </List.Item>\n                                    )}\n                                />\n                            }\n                        />\n                    </List.Item>\n                )}\n            />\n        </div>\n    )\n}\n\nexport default WorkExperience\n","import AboutMe from \"./aboutMe/AboutMe\"\nimport ProjectContainer from \"./projects/Projects\"\nimport WorkExperience from \"./work/WorkExperience\"\nimport { Divider } from \"antd\"\nimport { useEffect, useRef, useState } from \"react\"\n\nconst useOnScreen = (ref: any) => {\n    const [isIntersecting, setIntersecting] = useState(false)\n\n    const observer = new IntersectionObserver(\n        ([entry]) => {\n            setIntersecting(entry.isIntersecting)\n        },\n        { threshold: 0.5 }\n    )\n\n    useEffect(() => {\n        observer.observe(ref.current)\n        return () => {\n            observer.disconnect()\n        }\n    }, [])\n\n    return isIntersecting\n}\n\nconst setCurrentMenu = (\n    setMenuCallback: any,\n    aboutVisible: boolean,\n    workVisible: boolean,\n    projectVisible: boolean\n) => {\n    if (aboutVisible) {\n        setMenuCallback(\"about\")\n    } else if (projectVisible) {\n        setMenuCallback(\"project\")\n    } else {\n        setMenuCallback(\"work\")\n    }\n}\n\nconst ContentContainer = ({ setMenuInView }: any) => {\n    const aboutRef: any = useRef()\n    const workRef: any = useRef()\n    const projectRef: any = useRef()\n    const aboutVisible = useOnScreen(aboutRef)\n    const workVisible = useOnScreen(workRef)\n    const projectVisible = useOnScreen(projectRef)\n    setCurrentMenu(setMenuInView, aboutVisible, workVisible, projectVisible)\n    return (\n        <div>\n            <div ref={aboutRef} className=\"view-container\" id=\"about\">\n                <AboutMe />\n            </div>\n            <span id=\"work\"></span>\n            <Divider></Divider>\n            <div ref={workRef} className=\"view-container\">\n                <WorkExperience />\n            </div>\n            <Divider></Divider>\n            <div ref={projectRef} className=\"view-container\" id=\"projects\">\n                <ProjectContainer />\n            </div>\n        </div>\n    )\n}\n\nexport default ContentContainer\n","import \"./App.css\"\nimport Header from \"./components/Header\"\nimport ContentContainer from \"./components/ContentContainer\"\nimport { Row, Col } from \"antd\"\nimport { useState } from \"react\"\n\nconst App = () => {\n    const [currentMenuInView, setMenuInView] = useState(\"about\")\n    return (\n        <div>\n            <Header currentMenuInView={currentMenuInView} />\n            <Row>\n                <Col offset={1} span={22}>\n                    <ContentContainer setMenuInView={setMenuInView} />\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}